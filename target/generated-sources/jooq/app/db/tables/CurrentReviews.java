/*
 * This file is generated by jOOQ.
 */
package app.db.tables;


import app.db.Indexes;
import app.db.Keys;
import app.db.Public;
import app.db.tables.records.CurrentReviewsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrentReviews extends TableImpl<CurrentReviewsRecord> {

    private static final long serialVersionUID = -1187273273;

    /**
     * The reference instance of <code>public.current_reviews</code>
     */
    public static final CurrentReviews CURRENT_REVIEWS = new CurrentReviews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrentReviewsRecord> getRecordType() {
        return CurrentReviewsRecord.class;
    }

    /**
     * The column <code>public.current_reviews.id</code>.
     */
    public final TableField<CurrentReviewsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('current_reviews_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.current_reviews.deck_id</code>.
     */
    public final TableField<CurrentReviewsRecord, Integer> DECK_ID = createField("deck_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.current_reviews.card_instance_id</code>.
     */
    public final TableField<CurrentReviewsRecord, Integer> CARD_INSTANCE_ID = createField("card_instance_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.current_reviews.last_date_time</code>.
     */
    public final TableField<CurrentReviewsRecord, OffsetDateTime> LAST_DATE_TIME = createField("last_date_time", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>public.current_reviews</code> table reference
     */
    public CurrentReviews() {
        this(DSL.name("current_reviews"), null);
    }

    /**
     * Create an aliased <code>public.current_reviews</code> table reference
     */
    public CurrentReviews(String alias) {
        this(DSL.name(alias), CURRENT_REVIEWS);
    }

    /**
     * Create an aliased <code>public.current_reviews</code> table reference
     */
    public CurrentReviews(Name alias) {
        this(alias, CURRENT_REVIEWS);
    }

    private CurrentReviews(Name alias, Table<CurrentReviewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CurrentReviews(Name alias, Table<CurrentReviewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CurrentReviews(Table<O> child, ForeignKey<O, CurrentReviewsRecord> key) {
        super(child, key, CURRENT_REVIEWS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CURRENT_REVIEWS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CurrentReviewsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CURRENT_REVIEWS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CurrentReviewsRecord> getPrimaryKey() {
        return Keys.CURRENT_REVIEWS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CurrentReviewsRecord>> getKeys() {
        return Arrays.<UniqueKey<CurrentReviewsRecord>>asList(Keys.CURRENT_REVIEWS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CurrentReviewsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CurrentReviewsRecord, ?>>asList(Keys.CURRENT_REVIEWS__CURRENT_REVIEWS_DECKS_FK, Keys.CURRENT_REVIEWS__CURRENT_REVIEWS_CARDS_INSTANCES_FK);
    }

    public Decks decks() {
        return new Decks(this, Keys.CURRENT_REVIEWS__CURRENT_REVIEWS_DECKS_FK);
    }

    public CardsInstances cardsInstances() {
        return new CardsInstances(this, Keys.CURRENT_REVIEWS__CURRENT_REVIEWS_CARDS_INSTANCES_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurrentReviews as(String alias) {
        return new CurrentReviews(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurrentReviews as(Name alias) {
        return new CurrentReviews(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentReviews rename(String name) {
        return new CurrentReviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentReviews rename(Name name) {
        return new CurrentReviews(name, null);
    }
}
