/*
 * This file is generated by jOOQ.
 */
package app.db.tables;


import app.db.Indexes;
import app.db.Keys;
import app.db.Public;
import app.db.tables.records.DecksRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Decks extends TableImpl<DecksRecord> {

    private static final long serialVersionUID = -1960415623;

    /**
     * The reference instance of <code>public.decks</code>
     */
    public static final Decks DECKS = new Decks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DecksRecord> getRecordType() {
        return DecksRecord.class;
    }

    /**
     * The column <code>public.decks.id</code>.
     */
    public final TableField<DecksRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('decks_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.decks.version</code>.
     */
    public final TableField<DecksRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.decks.description</code>.
     */
    public final TableField<DecksRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.decks.notes</code>.
     */
    public final TableField<DecksRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.decks</code> table reference
     */
    public Decks() {
        this(DSL.name("decks"), null);
    }

    /**
     * Create an aliased <code>public.decks</code> table reference
     */
    public Decks(String alias) {
        this(DSL.name(alias), DECKS);
    }

    /**
     * Create an aliased <code>public.decks</code> table reference
     */
    public Decks(Name alias) {
        this(alias, DECKS);
    }

    private Decks(Name alias, Table<DecksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Decks(Name alias, Table<DecksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Decks(Table<O> child, ForeignKey<O, DecksRecord> key) {
        super(child, key, DECKS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DECKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DecksRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DECKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DecksRecord> getPrimaryKey() {
        return Keys.DECKS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DecksRecord>> getKeys() {
        return Arrays.<UniqueKey<DecksRecord>>asList(Keys.DECKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Decks as(String alias) {
        return new Decks(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Decks as(Name alias) {
        return new Decks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Decks rename(String name) {
        return new Decks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Decks rename(Name name) {
        return new Decks(name, null);
    }
}
