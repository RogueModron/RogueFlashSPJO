/*
 * This file is generated by jOOQ.
 */
package app.db.tables;


import app.db.Indexes;
import app.db.Keys;
import app.db.Public;
import app.db.tables.records.CardsReviewsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardsReviews extends TableImpl<CardsReviewsRecord> {

    private static final long serialVersionUID = 11915821;

    /**
     * The reference instance of <code>public.cards_reviews</code>
     */
    public static final CardsReviews CARDS_REVIEWS = new CardsReviews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsReviewsRecord> getRecordType() {
        return CardsReviewsRecord.class;
    }

    /**
     * The column <code>public.cards_reviews.id</code>.
     */
    public final TableField<CardsReviewsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('cards_reviews_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.cards_reviews.card_instance_id</code>.
     */
    public final TableField<CardsReviewsRecord, Integer> CARD_INSTANCE_ID = createField("card_instance_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.cards_reviews.value</code>.
     */
    public final TableField<CardsReviewsRecord, Short> VALUE = createField("value", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.cards_reviews.date_time</code>.
     */
    public final TableField<CardsReviewsRecord, OffsetDateTime> DATE_TIME = createField("date_time", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>public.cards_reviews</code> table reference
     */
    public CardsReviews() {
        this(DSL.name("cards_reviews"), null);
    }

    /**
     * Create an aliased <code>public.cards_reviews</code> table reference
     */
    public CardsReviews(String alias) {
        this(DSL.name(alias), CARDS_REVIEWS);
    }

    /**
     * Create an aliased <code>public.cards_reviews</code> table reference
     */
    public CardsReviews(Name alias) {
        this(alias, CARDS_REVIEWS);
    }

    private CardsReviews(Name alias, Table<CardsReviewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CardsReviews(Name alias, Table<CardsReviewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CardsReviews(Table<O> child, ForeignKey<O, CardsReviewsRecord> key) {
        super(child, key, CARDS_REVIEWS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CARDS_REVIEWS_PKEY, Indexes.FKI_CARDS_REVIEWS_CARDS_INSTANCES_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CardsReviewsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CARDS_REVIEWS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CardsReviewsRecord> getPrimaryKey() {
        return Keys.CARDS_REVIEWS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CardsReviewsRecord>> getKeys() {
        return Arrays.<UniqueKey<CardsReviewsRecord>>asList(Keys.CARDS_REVIEWS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CardsReviewsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CardsReviewsRecord, ?>>asList(Keys.CARDS_REVIEWS__CARDS_REVIEWS_CARDS_INSTANCES_FK);
    }

    public CardsInstances cardsInstances() {
        return new CardsInstances(this, Keys.CARDS_REVIEWS__CARDS_REVIEWS_CARDS_INSTANCES_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CardsReviews as(String alias) {
        return new CardsReviews(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CardsReviews as(Name alias) {
        return new CardsReviews(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CardsReviews rename(String name) {
        return new CardsReviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CardsReviews rename(Name name) {
        return new CardsReviews(name, null);
    }
}
