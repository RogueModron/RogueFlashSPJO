/*
 * This file is generated by jOOQ.
 */
package app.db.tables;


import app.db.Indexes;
import app.db.Keys;
import app.db.Public;
import app.db.tables.records.CardsPlansRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardsPlans extends TableImpl<CardsPlansRecord> {

    private static final long serialVersionUID = -1531225869;

    /**
     * The reference instance of <code>public.cards_plans</code>
     */
    public static final CardsPlans CARDS_PLANS = new CardsPlans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsPlansRecord> getRecordType() {
        return CardsPlansRecord.class;
    }

    /**
     * The column <code>public.cards_plans.id</code>.
     */
    public final TableField<CardsPlansRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('cards_plans_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.cards_plans.card_instance_id</code>.
     */
    public final TableField<CardsPlansRecord, Integer> CARD_INSTANCE_ID = createField("card_instance_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.cards_plans.next_date</code>.
     */
    public final TableField<CardsPlansRecord, OffsetDateTime> NEXT_DATE = createField("next_date", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.cards_plans.next_days</code>.
     */
    public final TableField<CardsPlansRecord, Integer> NEXT_DAYS = createField("next_days", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.cards_plans.last_date</code>.
     */
    public final TableField<CardsPlansRecord, OffsetDateTime> LAST_DATE = createField("last_date", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.cards_plans.last_days</code>.
     */
    public final TableField<CardsPlansRecord, Integer> LAST_DAYS = createField("last_days", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.cards_plans</code> table reference
     */
    public CardsPlans() {
        this(DSL.name("cards_plans"), null);
    }

    /**
     * Create an aliased <code>public.cards_plans</code> table reference
     */
    public CardsPlans(String alias) {
        this(DSL.name(alias), CARDS_PLANS);
    }

    /**
     * Create an aliased <code>public.cards_plans</code> table reference
     */
    public CardsPlans(Name alias) {
        this(alias, CARDS_PLANS);
    }

    private CardsPlans(Name alias, Table<CardsPlansRecord> aliased) {
        this(alias, aliased, null);
    }

    private CardsPlans(Name alias, Table<CardsPlansRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CardsPlans(Table<O> child, ForeignKey<O, CardsPlansRecord> key) {
        super(child, key, CARDS_PLANS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CARDS_PLANS_PKEY, Indexes.FKI_CARDS_PLANS_CARDS_INSTANCES_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CardsPlansRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CARDS_PLANS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CardsPlansRecord> getPrimaryKey() {
        return Keys.CARDS_PLANS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CardsPlansRecord>> getKeys() {
        return Arrays.<UniqueKey<CardsPlansRecord>>asList(Keys.CARDS_PLANS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CardsPlansRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CardsPlansRecord, ?>>asList(Keys.CARDS_PLANS__CARDS_PLANS_CARDS_INSTANCES_FK);
    }

    public CardsInstances cardsInstances() {
        return new CardsInstances(this, Keys.CARDS_PLANS__CARDS_PLANS_CARDS_INSTANCES_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CardsPlans as(String alias) {
        return new CardsPlans(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CardsPlans as(Name alias) {
        return new CardsPlans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CardsPlans rename(String name) {
        return new CardsPlans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CardsPlans rename(Name name) {
        return new CardsPlans(name, null);
    }
}
